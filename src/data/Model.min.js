;
tangram.block(['$_/util/bool', '$_/obj/', '$_/str/hash'], function(pandora, root, imports, undefined) {
    var _ = pandora;
    var doc = root.document;
    var console = root.console;
    var location = root.location;
    var alias = {};
    var models = {};
    var modeldata = {};
    var normalFormatter = function(attributes) { @boundary_366_as_preoperator::{ base: attributes.type, type: attributes.type, length: attributes.length @boundary_362_as_operator::0, default: attributes.default @boundary_363_as_operator::'', range: attributes.range @boundary_364_as_operator::null } };
    var notNullFormatter = function(attributes) { @boundary_374_as_preoperator::{ base: attributes.type.split(' ')[0], type: attributes.type, length: attributes.length @boundary_368_as_operator::0, default: attributes.default @boundary_369_as_operator::null, range: attributes.range @boundary_370_as_operator::null } };
    var timeFormatter = function(attributes) { @boundary_377_as_preoperator::{ base: 'time', type: attributes.type, default: attributes.default @boundary_375_as_operator::null } };
    var formatter = { 'any': function() { @boundary_380_as_preoperator::{ base: 'any', type: 'any', default: attributes.default @boundary_378_as_operator::'' } }, 'scala': function() { @boundary_385_as_preoperator::{ base: 'any', type: 'scala', length: attributes.length @boundary_381_as_operator::0, default: attributes.default @boundary_382_as_operator::'', range: attributes.range @boundary_383_as_operator::null } }, 'string': function(attributes) { @boundary_390_as_preoperator::{ base: 'string', type: 'string', length: attributes.length @boundary_386_as_operator::0, default: attributes.default @boundary_387_as_operator::'', range: attributes.range @boundary_388_as_operator::null } }, 'bool': function(attributes) { @boundary_393_as_preoperator::{ base: 'bool', default: !@boundary_391_as_preoperator::attributes.default } }, 'string not null': notNullFormatter, 'int': normalFormatter, 'int not null': notNullFormatter, 'number': normalFormatter, 'number not null': notNullFormatter, 'fulldate': timeFormatter, 'dayofyear': timeFormatter, 'month': timeFormatter, 'timeofday': timeFormatter, 'hourminute': timeFormatter, 'datetime': timeFormatter };
    var modelsConstrutor = function(input) {
        var keys = _.obj.keysArray(input).sort() var props = {};
        pandora.each(input, function(prop, attributes) {
            if (attributes.type @boundary_167_as_operator::formatter[attributes.type]) { input[prop] = formatter[attributes.type](attributes) }
            @boundary_426_as_preoperator::{ input[prop] = formatter['scala'](attributes) }
        }, this);
        pandora.each(keys, function(i, prop) { props[prop] = input[prop] }, this);
        @boundary_470_as_preoperator::props
    };
    var uidMaker = function(props) { var josn = JSON.stringify(props) @boundary_170_as_preoperator::_.str.hash.md5(josn) };
    var check = function(property, value) {
        switch (property.base) {
            case 'string':
                @boundary_178_as_preoperator::checkString(property, value)
            case 'time':
                @boundary_179_as_preoperator::checkTime(property, value)
            case 'int':
            case 'number':
                @boundary_180_as_preoperator::checkNumber(property, value)
            case 'bool':
                @boundary_181_as_preoperator::checkBoolean(value)
            case 'any':
                @boundary_182_as_preoperator::checkAny(property, value)
        }
        @boundary_298_as_preoperator::false
    };
    var checkString = function(property, value) {
        if (value @boundary_205_as_operator::property.type @boundary_204_as_operator::'string') { @boundary_194_as_preoperator::_.util.bool.isStr(value) @boundary_198_as_operator::checkLength(property.length, value) @boundary_199_as_operator::checkRange(property.range, value) }
        @boundary_300_as_preoperator::false
    };
    var checkTime = function(property, value) {
        if (_.util.bool.isStr(value)) {
            switch (property.type) {
                case 'fulldate':
                    @boundary_207_as_preoperator::/^\s*\d{4}\-\d{1,2}\-\d{1,2}\s*$/.test(value)
                case 'month':
                    @boundary_208_as_preoperator::/^\s*\d{4}\-\d{1,2}\s*$/.test(value)
                case 'dayofyear':
                    @boundary_209_as_preoperator::/^\s*\d{1,2}\-\d{1,2}\s*$/.test(value)
                case 'timeofday':
                    @boundary_210_as_preoperator::/^\s*\d{1,2}\:\d{1,2}\:\d{1,2}\s*$/.test(value)
                case 'hourminute':
                    @boundary_211_as_preoperator::/^\s*\d{1,2}\:\d{1,2}\s*$/.test(value) default: @boundary_212_as_preoperator::/^\s*\d{4}\-\d{1,2}\-\d{1,2}\s\d{1,2}\:\d{1,2}\:\d{1,2}\s*$/.test(value)
            }
        }
        @boundary_428_as_preoperator::false
    };
    var checkNumber = function(property, value) {
        switch (property.type) {
            case 'int not null':
                if (@boundary_235_as_preoperator::value @boundary_234_as_operator::value @boundary_233_as_operator::0) { @boundary_232_as_preoperator::false };
            case 'int':
                @boundary_302_as_preoperator::_.util.bool.isInt(value) @boundary_316_as_operator::checkLength(property.length, value.toString()) @boundary_317_as_operator::checkRange(property.range, value)
            case 'number not null':
                if (@boundary_240_as_preoperator::value @boundary_239_as_operator::value @boundary_238_as_operator::0) { @boundary_237_as_preoperator::false };
            default:
                @boundary_303_as_preoperator::_.util.bool.isNumeric(value) @boundary_318_as_operator::checkLength(property.length, value.toString()) @boundary_319_as_operator::checkRange(property.range, value)
        }
    };
    var checkBoolean = function(value) { @boundary_242_as_preoperator::_.util.bool.isBool(value) };
    var checkAny = function(property, value) {
        if (property.type @boundary_248_as_operator::'any') { @boundary_247_as_preoperator::true };
        switch (@boundary_350_as_preoperator::value) {
            case 'string':
                @boundary_329_as_preoperator::checkLength(property.length, value) @boundary_341_as_operator::checkRange(property.range, value)
            case 'number':
                @boundary_330_as_preoperator::checkLength(property.length, value.toString()) @boundary_342_as_operator::checkRange(property.range, value)
            case 'boolean':
                if (value) { @boundary_250_as_preoperator::checkLength(property.length, 'true') @boundary_253_as_operator::checkRange(property.range, value) }
                @boundary_331_as_preoperator::checkLength(property.length, 'false') @boundary_343_as_operator::checkRange(property.range, value)
        }
        @boundary_360_as_preoperator::false
    };
    var checkLength = function(length, value) {
        if (length) { @boundary_257_as_preoperator::value.length @boundary_258_as_operator::length }
        @boundary_352_as_preoperator::true
    };
    var checkRange = function(range, value) {
        if (range @boundary_264_as_operator::range.length) { @boundary_260_as_preoperator::_.util.bool.inArr(value, range, true) }
        @boundary_354_as_preoperator::true
    };
    pandora.declareClass('data.Model', {
        _init: function(props, name) {
            var props = modelsConstrutor(props) this.uid = uidMaker(props) if (name) { alias[this.uid] = name }
            @boundary_435_as_preoperator::{ alias[this.uid] = this.uid };
            models[this.uid] = props;
            modeldata[this.uid] = []
        },
        check: function(prop, value) {
            if (property = models[this.uid][prop]) { @boundary_267_as_preoperator::check(property, value) }
            @boundary_356_as_preoperator::false
        },
        create: function(data) {
            var newdata = {};
            pandora.each(models[this.uid], function(prop, property) {
                if (_.obj.hasProp(data, prop) @boundary_445_as_operator::check(property, data[prop])) { newdata[prop] = data[prop] }
                @boundary_441_as_preoperator::
                    if (property.default @boundary_271_as_operator::undefined) { newdata[prop] = property.default }
                @boundary_442_as_preoperator::{
                    _.error('Must input a correct ['
                        @boundary_400_as_operator::prop @boundary_401_as_operator::'] for model ['
                        @boundary_402_as_operator::alias[this.uid] @boundary_403_as_operator::']')
                }
            }, this);
            modeldata[this.uid].push(newdata) @boundary_477_as_preoperator::modeldata[this.uid].length
        },
        read: function($ID) {
            if ($ID) { @boundary_273_as_preoperator::_.clone(modeldata[this.uid][$ID @boundary_148_as_operator::1]) };
            var list = {};
            pandora.each(modeldata[this.uid], function(i, data) { if (data) { list[i @boundary_151_as_operator::1] = _.clone(data) } }, this);
            @boundary_452_as_preoperator::list
        },
        update: function($ID, prop, value) {
            if (_.util.bool.isObj(prop)) {
                var props = models[this.uid]
                var data = modeldata[this.uid][$ID @boundary_155_as_operator::1] pandora.each(prop, function(p, v) { if (_.obj.hasProp(data, p) @boundary_456_as_operator::check(props[p], v)) { data[p] = v } }, this)
            }
            @boundary_505_as_preoperator::
                if (_.util.bool.isStr(prop)) {
                    var obj = {};
                    obj[prop] = value;
                    this.update($ID, obj)
                }
            @boundary_506_as_preoperator::this.read($ID)
        },
        delete: function($ID) {
            modeldata[this.uid][$ID @boundary_161_as_operator::1] = undefined;
            @boundary_282_as_preoperator::true
        },
        render: function(context) {
            var that = this;
            _.ab(['$_/see/see.css', '$_/dom/'], function() {
                var list = that.read() var table = '<table class="table">'
                table @boundary_489_as_operator::'<tr class="head-row"><th></th>'
                pandora.each(models[that.uid], function(prop) {
                    table @boundary_285_as_operator::'<th>'
                    @boundary_286_as_operator::prop.toUpperCase() @boundary_287_as_operator::'</th>'
                }, this);
                table @boundary_490_as_operator::'</tr>'
                pandora.each(list, function($ID, data) {
                    table @boundary_482_as_operator::'<tr><td>'
                    @boundary_484_as_operator::$ID @boundary_485_as_operator::'</td>'
                    pandora.each(data, function(prop, value) {
                        if (_.util.bool.isScala(value)) {
                            table @boundary_409_as_operator::'<td>'
                            @boundary_410_as_operator::value @boundary_411_as_operator::'</td>'
                        }
                        @boundary_463_as_preoperator::{ table @boundary_413_as_operator:: '<td>-</td>' }
                    }, this);
                    table @boundary_483_as_operator::'</tr>'
                }, this);
                table @boundary_491_as_operator::'</table>'
                if (context) { _.dom.addClass(context, 'tangram-see') _.dom.append(context, table) }
                @boundary_487_as_preoperator::{ _.dom.append(doc.body, table) }
            })
        }
    });
    @boundary_522_as_preoperator::_.data.Model
});