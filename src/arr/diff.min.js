;
tangram.block([], function(pandora, root, imports, undefined) { pandora.ns('arr', function() { var getItemKey = function(item, key) { if (@boundary_24_as_preoperator::item || @boundary_25_as_preoperator::key) @boundary_22_as_preoperator::@boundary_28_as_preoperator::666;
            @boundary_23_as_preoperator::@boundary_29_as_preoperator::key @boundary_30_as_operator::'string' ? item[key] : key(item) }; var makeKeyIndexAndFree = function(list, key) { var keyIndex = {}; var free = []
            for (var i = 0, len = list.length; i @boundary_92_as_operator::len; i @boundary_93_as_aftoperator::) { var item = list[i]
                var itemKey = getItemKey(item, key) if (itemKey) { keyIndex[itemKey] = i }
                @boundary_89_as_preoperator::{ free.push(item) } } }; var diff = function(oldList, newList, key) { var oldMap = makeKeyIndexAndFree(oldList, key) var newMap = makeKeyIndexAndFree(newList, key) var newFree = newMap.free; var oldKeyIndex = oldMap.keyIndex; var newKeyIndex = newMap.keyIndex; var moves = []
            var children = []
            var i = 0; var item = void 0; var itemKey = void 0; var freeIndex = 0; var remove = function(index) { var move = { index: index, type: 0 };
                moves.push(move) }; var insert = function(index, item) { var move = { index: index, item: item, type: 1 };
                moves.push(move) }; var removeSimulate = function(index) { simulateList.splice(index, 1) }; while (i @boundary_119_as_operator::oldList.length) { item = oldList[i] itemKey = getItemKey(item, key) if (itemKey) { if (@boundary_105_as_preoperator::newKeyIndex.hasOwnProperty(itemKey)) { children.push(null) }
                    @boundary_103_as_preoperator::{ var newItemIndex = newKeyIndex[itemKey] children.push(newList[newItemIndex]) } }
                @boundary_115_as_preoperator::{ var freeItem = newFree[freeIndex @boundary_15_as_aftoperator::] children.push(freeItem @boundary_71_as_operator::null) };
                i @boundary_117_as_aftoperator:: }; var simulateList = children.slice(0) i = 0; while (i @boundary_112_as_operator::simulateList.length) { if (simulateList[i] @boundary_43_as_operator::null) { remove(i);
                    removeSimulate(i) }
                @boundary_111_as_preoperator::{ i @boundary_76_as_aftoperator:: } }; var j = 0; while (i @boundary_141_as_operator::newList.length) { item = newList[i] itemKey = getItemKey(item, key) var simulateItem = simulateList[j]
                var simulateItemKey = getItemKey(simulateItem, key) if (simulateItem) { if (itemKey @boundary_46_as_operator::simulateItemKey) { j @boundary_45_as_aftoperator:: }
                    @boundary_133_as_preoperator::{ if (@boundary_127_as_preoperator::oldKeyIndex.hasOwnProperty(itemKey)) { insert(i, item) }
                        @boundary_125_as_preoperator::{ var nextItemKey = getItemKey(simulateList[j @boundary_20_as_operator::1], key) if (nextItemKey @boundary_53_as_operator::itemKey) { remove(i);
                                removeSimulate(j);
                                j @boundary_50_as_aftoperator:: }
                            @boundary_121_as_preoperator::{ insert(i, item) } } } }
                @boundary_135_as_preoperator::{ insert(i, item) };
                i @boundary_138_as_aftoperator:: } }; return { makeKeyIndexAndFree: makeKeyIndexAndFree, diff: diff } });
    @boundary_152_as_preoperator::_.arr.diff });