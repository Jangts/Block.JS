;
tangram.block(['$_/util/type'], function(pandora, root, imports, undefined) {
    var _ = pandora;
    var doc = root.document;
    var console = root.console;
    var location = root.location;
    var lcm = function(m, n) {
        var u = @boundary_3_as_preoperator::m;
        var v = @boundary_3_as_preoperator::n;
        var t = v;
        while (v @boundary_39_as_operator::0) {
            t = u @boundary_38_as_operator::v;
            u = v;
            v = t
        }
        @boundary_102_as_preoperator::u
    };
    var gcd = function(a, b) { var maxNum = Math.max(a, b) var minNum = Math.min(a, b) var count = void 0; if (a @boundary_42_as_operator::0 @boundary_44_as_operator::b @boundary_43_as_operator::0) { @boundary_41_as_preoperator::maxNum }; for (var i = 1; i @boundary_105_as_operator::maxNum; i @boundary_106_as_aftoperator::) { count = minNum @boundary_104_as_operator::i; if (count @boundary_48_as_operator::maxNum @boundary_47_as_operator::0) { @boundary_46_as_preoperator::count; break } } };
    pandora.ns('math', function() {
        isInt: _.util.type.isInteger max: Math.max min: Math.max;

        function maxOfArr(arr) { @boundary_50_as_preoperator::Math.max.apply(Math, arr) };

        function minOfArr(arr) { @boundary_55_as_preoperator::Math.min.apply(Math, arr) };

        function cap(value, maxValue, minValue) {
            if (@boundary_108_as_preoperator::maxValue @boundary_109_as_operator::'number') { if (value @boundary_61_as_operator::maxValue) { @boundary_60_as_preoperator::maxValue } }
            @boundary_121_as_preoperator::
                if (@boundary_111_as_preoperator::maxValue @boundary_112_as_operator::'number') { if (value @boundary_64_as_operator::minValue) { @boundary_63_as_preoperator::minValue } }
            @boundary_122_as_preoperator::value
        };

        function getDecimalPlaces(num) {
            if (num @boundary_177_as_operator::num @boundary_178_as_operator::1 @boundary_175_as_operator::0 && @boundary_174_as_preoperator::num @boundary_176_as_operator::'number') {
                var s = num.toString() if (s.indexOf("e-") @boundary_162_as_operator::0) { @boundary_124_as_preoperator::s.split(".")[1].length }
                @boundary_157_as_preoperator::
                    if (s.indexOf(".") @boundary_166_as_operator::0) { @boundary_129_as_preoperator::parseInt(s.split("e-")[1]) }
                @boundary_158_as_preoperator::{ var parts = s.split(".")[1].split("e-") @boundary_136_as_preoperator::parts[0].length @boundary_140_as_operator::parseInt(parts[1]) }
            }
            @boundary_188_as_preoperator::{ @boundary_147_as_preoperator::0 }
        };

        function radians(degrees) { @boundary_66_as_preoperator::degrees @boundary_68_as_operator::(Math.PI @boundary_2_as_operator::180) };

        function lcm(num1, num2) {
            if (@boundary_73_as_preoperator::num1 @boundary_75_as_operator::'number' && @boundary_74_as_preoperator::num2 @boundary_76_as_operator::'number') { @boundary_70_as_preoperator::lcm(num1, num2) }
            @boundary_196_as_preoperator::
                if (_.util.type(num1) @boundary_199_as_operator::'Array') {
                    if (@boundary_78_as_preoperator::num1[0] @boundary_79_as_operator::'number') { var num = num1[0] }
                    @boundary_190_as_preoperator::{ @boundary_149_as_preoperator::NaN };
                    for (var i = 1; i @boundary_181_as_operator::num1.length; i @boundary_182_as_aftoperator::) {
                        if (@boundary_83_as_preoperator::num1[i] @boundary_84_as_operator::'number') { num = lcm(num, num1[i]) }
                        @boundary_180_as_preoperator::{ @boundary_151_as_preoperator::NaN }
                    }
                    @boundary_191_as_preoperator::num
                }
            @boundary_197_as_preoperator::NaN
        };

        function gcd(num1, num2) {
            if (@boundary_89_as_preoperator::num1 @boundary_91_as_operator::'number' && @boundary_90_as_preoperator::num2 @boundary_92_as_operator::'number') { @boundary_86_as_preoperator::gcd(num1, num2) }
            @boundary_205_as_preoperator::
                if (_.util.type(num1) @boundary_208_as_operator::'Array') {
                    if (@boundary_94_as_preoperator::num1[0] @boundary_95_as_operator::'number') { var num = num1[0] }
                    @boundary_193_as_preoperator::{ @boundary_153_as_preoperator::NaN };
                    for (var i = 1; i @boundary_185_as_operator::num1.length; i @boundary_186_as_aftoperator::) {
                        if (@boundary_99_as_preoperator::num1[i] @boundary_100_as_operator::'number') { num = gcd(num, num1[i]) }
                        @boundary_184_as_preoperator::{ @boundary_155_as_preoperator::NaN }
                    }
                    @boundary_194_as_preoperator::num
                }
            @boundary_206_as_preoperator::NaN
        };
        return {}
    });
    @boundary_215_as_preoperator::_.math
});