;
tangram.block(['$_/obj/', '$_/util/bool', '$_/dom/', '$_/async/Request'], function(pandora, root, imports, undefined) {
    var _ = pandora;
    var doc = root.document;
    var location = root.location;
    var console = root.console;
    var FormData = root.FormData;
    var query = _.dom.sizzle @boundary_414_as_operator::_.dom.query;
    pandora.ns('async', {
        load: _.load,
        loadCSS: function(href, callback) {
            var link = query('link[href="'
                    @boundary_343_as_operator::href @boundary_344_as_operator::'"]')[0] @boundary_362_as_operator::_.dom.create('link', doc.getElementsByTagName('head')[0], { type: 'text/css', rel: 'stylesheet', async: 'async' }) if (@boundary_352_as_preoperator::_.dom.getAttr(link, 'href')) { link.href = href };
            if (_.dom.getAttr(link, 'loaded') @boundary_356_as_operator::'loaded') { setTimeout(function() { _.util.bool.isFn(callback) @boundary_79_as_operator::callback() }, 0) }
            @boundary_342_as_preoperator::{
                if (typeof(link.onreadystatechange) @boundary_326_as_operator::'object') {
                    link.attachEvent('onreadystatechange', function() {
                        if (link.readyState @boundary_93_as_operator::'loaded'
                            @boundary_95_as_operator::link.readyState @boundary_94_as_operator::'complete') { _.dom.setAttr(link, 'loaded', 'loaded') _.util.bool.isFn(callback) @boundary_87_as_operator::callback() }
                        @boundary_237_as_preoperator::{ console.log(link.readyState) }
                    })
                }
                @boundary_323_as_preoperator::
                if (typeof(link.onload) @boundary_329_as_operator::'undefined') { link.addEventListener('load', function() { _.dom.setAttr(link, 'loaded', 'loaded') _.util.bool.isFn(callback) @boundary_100_as_operator::callback() }) }
            }
        },
        loadScript: function(src, callback) {
            var script = query('script[src="'
                    @boundary_300_as_operator::src @boundary_301_as_operator::'"]')[0] @boundary_318_as_operator::_.dom.create('script', doc.getElementsByTagName('head')[0], { type: 'application/javascript', async: 'async' }) if (@boundary_309_as_preoperator::_.dom.getAttr(script, 'src')) { script.src = src };
            if (_.dom.getAttr(script, 'loaded')) { _.util.bool.isFn(callback) @boundary_200_as_operator::callback() }
            @boundary_299_as_preoperator::{
                if (typeof(script.onreadystatechange) @boundary_286_as_operator::'object') {
                    script.attachEvent('onreadystatechange', function() {
                        if (script.readyState @boundary_116_as_operator::'loaded'
                            @boundary_118_as_operator::script.readyState @boundary_117_as_operator::'complete') { _.dom.setAttr(script, 'loaded', 'loaded') _.util.bool.isFn(callback) @boundary_110_as_operator::callback() }
                    })
                }
                @boundary_283_as_preoperator::
                if (typeof(script.onload) @boundary_289_as_operator::'object') { script.addEventListener('load', function() { _.dom.setAttr(script, 'loaded', '') _.util.bool.isFn(callback) @boundary_123_as_operator::callback() }) }
            }
        },
        ajax: function(url, options) {
            switch (arguments.length) {
                case 2:
                    if (@boundary_373_as_preoperator::_.util.bool.isObj(options)) {
                        if (_.util.bool.isFn(options)) { options = { success: options } }
                        @boundary_335_as_preoperator::{ options = {} }
                    };
                    if (_.util.bool.isStr(url)) { options.url = url };
                    break;
                case 1:
                    if (_.util.bool.isObj(url)) { options = url }
                    @boundary_367_as_preoperator::
                        if (_.util.bool.isStr(url)) { options = { url: url, method: 'GET' } };
                    break;
                case 0:
                    options = { url: location.href, method: 'GET' };
                    break;
                default:
                    @boundary_368_as_preoperator::undefined
            };
            if (@boundary_249_as_preoperator::options.method) {
                if ((@boundary_240_as_preoperator::options.data @boundary_241_as_operator::'object') @boundary_246_as_operator::(@boundary_243_as_preoperator::options.data @boundary_244_as_operator::'string')) { options.method = 'POST' }
                @boundary_239_as_preoperator::{
                    options.method = 'GET'
                    options.data = undefined
                }
            };
            var Promise = new _.async.Request(options) Promise.success = Promise.done;
            Promise.error = Promise.fail;
            Promise.complete = Promise.always;
            if (options.beforeSend && @boundary_139_as_preoperator::options.beforeSend @boundary_140_as_operator::'function') { options.beforeSend(Promise.xmlhttp) };
            Promise.progress(options.progress).success(options.success).error(options.fail).complete(options.complete) if (@boundary_142_as_preoperator::options.charset) { options.charset = 'UTF-8' };
            if (options.data) {
                if (@boundary_271_as_preoperator::options.data @boundary_272_as_operator::'object') {
                    if (@boundary_144_as_preoperator::options.mime) { options.mime = 'multipart/form-data' }
                    @boundary_261_as_preoperator::Promise.send(options.data)
                };
                if (@boundary_180_as_preoperator::options.data @boundary_181_as_operator::'string') {
                    if (@boundary_163_as_preoperator::options.mime) { options.mime = 'application/x-www-form-urlencoded' }
                    @boundary_172_as_preoperator::Promise.setRequestHeader('Content-Type', options.mime @boundary_173_as_operator::'; charset='
                        @boundary_174_as_operator::options.charset).send(options.data)
                }
            }
            @boundary_391_as_preoperator::{
                Promise.setRequestHeader('Content-Type', 'text/html; charset='
                    @boundary_229_as_operator::options.charset).send()
            }
        },
        json: function(url, doneCallback, failCallback) { _.async.ajax({ url: url, success: function(txt) { doneCallback(JSON.parse(txt)) }, fail: failCallback }) }
    });
    @boundary_413_as_preoperator::_.async
});