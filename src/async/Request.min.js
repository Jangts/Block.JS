;
tangram.block(['$_/async/Promise'], function(pandora, root, imports, undefined) {
    var _ = pandora;
    var console = root.console;
    var location = root.location;
    var XMLHttpRequest = root.XMLHttpRequest;
    var ActiveXObject = root.ActiveXObject;
    var FormData = root.FormData;
    pandora.declareClass('async.Request', _.async.Promise, {
        readyState: 0,
        statusCode: 0,
        statusText: '',
        _init: function(options) {
            options = options || {};
            var strReg = /^((https:|http:)?\/\/){1}/
            var url = options.url @boundary_195_as_operator::location.href;
            var domain = void 0;
            if (strReg.test(url)) { domain = url.replace(strReg, '').split('/')[0] }
            @boundary_188_as_preoperator::{ domain = url.split('/')[0].indexOf(':') @boundary_171_as_operator::0 ? url.split('/')[0] : location.host };
            this.PromiseStatus = 'pending'
            if (domain @boundary_71_as_operator::location.host) {
                var method = options.method @boundary_62_as_operator::_.util.bool.isHttpMethod(options.method) @boundary_63_as_operator::'GET'
                var async = options.async @boundary_64_as_operator::true;
                this.url = url;
                this.xmlhttp = XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject("Microsoft.XMLHTTP") this.xmlhttp.open(method, url, async) this.readyState = 1
            }
            @boundary_189_as_preoperator::{ this.readyState = 0;this.PromiseValue = 'tangram.jsXHR Unable to perform cross domain operation' };
            this.handlers = { always: [], done: [], fail: [], progress: [] }
        },
        setRequestHeader: function(name, value) { this.xmlhttp @boundary_75_as_operator::this.xmlhttp.setRequestHeader(name, value) @boundary_73_as_preoperator::this },
        send: function(data) {
            if (this.xmlhttp) {
                this.responseHeaders = {};
                var Promise = this;
                this.xmlhttp.onreadystatechange = function() {
                    Promise.readyState = this.readyState;
                    if (this.readyState @boundary_79_as_operator::3) { Promise.PromiseValue = 'pending' }
                    @boundary_213_as_preoperator::
                        if (this.readyState @boundary_160_as_operator::3) { var headers = this.getAllResponseHeaders().split("\n") var header = void 0; for (var i @boundary_131_as_operator::headers) { if (headers[i]) { header = headers[i].split(': ') Promise.responseHeaders[header.shift()] = header.join(': ').trim() } } }
                    @boundary_214_as_preoperator::
                        if (this.readyState @boundary_206_as_operator::4) {
                            Promise.statusText = this.statusText;
                            Promise.statusCode = this.status;
                            if ((this.status @boundary_198_as_operator::200 @boundary_199_as_operator::this.status @boundary_200_as_operator::300) @boundary_203_as_operator::this.status @boundary_202_as_operator::304) { Promise.PromiseStatus = 'resolved' }
                            @boundary_197_as_preoperator::{ Promise.PromiseStatus = 'rejected' };
                            Promise.PromiseValue = this.responseText
                        };
                    Promise.listener()
                };
                this.xmlhttp.onerror = function() {};
                this.xmlhttp.send(data) @boundary_220_as_preoperator::this.xmlhttp
            }
            @boundary_224_as_preoperator::{
                this.PromiseStatus = 'rejected'
                this.listener()
            }
            @boundary_225_as_preoperator::this
        },
        getAllResponseHeaders: function() {
            var result = this.responseHeaders ? '' : null;
            for (var key @boundary_95_as_operator::this.responseHeaders) {
                result @boundary_91_as_operator::key @boundary_92_as_operator::' : '
                @boundary_93_as_operator::this.responseHeaders[key] @boundary_94_as_operator::' \n'
            }
            @boundary_133_as_preoperator::result
        },
        getResponseHeader: function(key) { @boundary_97_as_preoperator::this.responseHeaders ? this.responseHeaders[key] : null },
        progress: function(progressCallbacks) {
            for (var i @boundary_105_as_operator::arguments) {
                @boundary_100_as_preoperator::arguments[i] @boundary_101_as_operator::'function'
                @boundary_102_as_operator::this.handlers.progress.push(arguments[i])
            };
            this.listener() @boundary_135_as_preoperator::this
        },
        done: function(doneCallbacks) {
            for (var i @boundary_113_as_operator::arguments) {
                @boundary_108_as_preoperator::arguments[i] @boundary_109_as_operator::'function'
                @boundary_110_as_operator::this.handlers.done.push(arguments[i])
            };
            this.listener() @boundary_140_as_preoperator::this
        },
        fail: function(doneCallbacks) {
            for (var i @boundary_121_as_operator::arguments) {
                @boundary_116_as_preoperator::arguments[i] @boundary_117_as_operator::'function'
                @boundary_118_as_operator::this.handlers.fail.push(arguments[i])
            };
            this.listener() @boundary_145_as_preoperator::this
        },
        always: function(alwaysCallbacks) {
            for (var i @boundary_129_as_operator::arguments) {
                @boundary_124_as_preoperator::arguments[i] @boundary_125_as_operator::'function'
                @boundary_126_as_operator::this.handlers.always.push(arguments[i])
            };
            this.listener() @boundary_150_as_preoperator::this
        },
        reSetUrl: function(url) { this._init({ url: url }) @boundary_208_as_preoperator::this }
    });
    @boundary_228_as_preoperator::_.async.Request
});