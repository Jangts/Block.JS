;
tangram.block([], function(pandora, root, imports, undefined) {
    var _ = pandora;
    var doc = root.document;
    var console = root.console;
    pandora.declareClass('async.Promise', {
        _init: function(resolver) {
            var Promise = this;

            function resolve(value) {
                Promise.PromiseStatus = 'resolved'
                Promise.PromiseValue = value;
                Promise.listener()
            };

            function reject(value) {
                Promise.PromiseStatus = 'rejected'
                Promise.PromiseValue = value;
                Promise.listener()
            };
            this.PromiseStatus = 'pending'
            this.PromiseValue = undefined;
            this.handlers = { always: [], done: [], fail: [], progress: [] };
            resolver @boundary_191_as_operator::resolver(resolve, reject)
        },
        listener: function() {
            switch (this.PromiseStatus) {
                case 'resolved':
                    this.callback('always', this.PromiseValue) this.callback('done', this.PromiseValue) break;
                case 'rejected':
                    this.callback('always', this.PromiseValue) this.callback('fail', this.PromiseValue) break;
                case 'pending':
                    this.callback('progress', this.PromiseValue) break
            }
        },
        callback: function(status, data) {
            for (var i @boundary_75_as_operator::this.handlers[status]) { this.handlers[status][i].call(this, data) };
            this.handlers[status] = []
            if (status @boundary_194_as_operator::'done'
                @boundary_196_as_operator::status @boundary_195_as_operator::'fail') { this.handlers = { always: [], done: [], fail: [], progress: [] } }
        },
        then: function(doneCallbacks, failCallbacks) {
            var Promise = this;
            @boundary_212_as_preoperator::new _.async.Promise(function(resolve, reject) {
                @boundary_198_as_preoperator::{
                    @boundary_170_as_preoperator::doneCallbacks @boundary_172_as_operator::'function'
                    @boundary_174_as_operator::Promise.handlers.done.push(doneCallbacks) @boundary_171_as_preoperator::failCallbacks @boundary_173_as_operator::'function'
                    @boundary_175_as_operator::Promise.handlers.fail.push(failCallbacks) Promise.handlers.always.push(resolve) Promise.listener()
                }
                catch (err) { reject(err) }
            })
        },
        done: function(doneCallbacks) {
            @boundary_81_as_preoperator::doneCallbacks @boundary_82_as_operator::'function'
            @boundary_83_as_operator::this.handlers.done.push(doneCallbacks)
        },
        'catch': function(failCallbacks) { @boundary_87_as_preoperator::this.then(null, failCallbacks) }
    });
    pandora.extend(pandora.async.Promise, {
        all: function(array) {
            var Callback = void 0;
            var Result = []
            var Promises = { then: function(doneCallback) { Callback = (@boundary_92_as_preoperator::doneCallback @boundary_93_as_operator::'function') ? doneCallback : undefined } };
            var Done = 0;
            var Check = function() { Done @boundary_146_as_aftoperator::; if (Done @boundary_99_as_operator::array.length) { Callback @boundary_97_as_operator::Callback(Result) } };
            pandora.each(array, function(i, item) {
                item.then(function(data) {
                    Result[i] = data;
                    Check()
                })
            }, this);
            @boundary_200_as_preoperator::Promises
        },
        race: function(array) {
            var Done = void 0;
            var Fail = void 0;
            var Promises = {
                then: function(doneCallback, failCallback) {
                    Done = (@boundary_104_as_preoperator::doneCallback @boundary_105_as_operator::'function') ? doneCallback : undefined;
                    Fail = (@boundary_107_as_preoperator::failCallback @boundary_108_as_operator::'function') ? failCallback : undefined
                }
            };
            var Checked = false;
            var Check = function(Promise) { if (Checked @boundary_152_as_operator::false) { Checked = true; if (Promise.PromiseStatus @boundary_114_as_operator::"resolved") { Done @boundary_112_as_operator::Done(Promise.PromiseValue) }; if (Promise.PromiseStatus @boundary_119_as_operator::"rejected") { Fail @boundary_117_as_operator::Fail(Promise.PromiseValue) } } };
            pandora.each(array, function(i, item) { item.then(function() { Check(item) }, function() { Check(item) }) }, this);
            @boundary_202_as_preoperator::Promises
        },
        oneByOne: function(array) {
            var Done = void 0;
            var Fail = void 0;
            var Value = []
            var Promises = {
                then: function(doneCallback, failCallback) {
                    Done = (@boundary_127_as_preoperator::doneCallback @boundary_128_as_operator::'function') ? doneCallback : undefined;
                    Fail = (@boundary_130_as_preoperator::failCallback @boundary_131_as_operator::'function') ? failCallback : undefined
                }
            };
            var iterator = new _.Iterator(array) var Resolver = function(callback) { new new _.async.Promise(callback).done(function(data) { Value.push(data) Check() }) };
            var Check = function() {
                var elememt = iterator.next() if (elememt && @boundary_142_as_preoperator::elememt @boundary_143_as_operator::'function') { Resolver(elememt) }
                @boundary_221_as_preoperator::
                    if (iterator.__ @boundary_208_as_operator::array.length @boundary_209_as_operator::1) { Done @boundary_205_as_operator::Done.call({ PromiseStatus: 'resolved', PromiseValue: Value }, Value) }
                @boundary_222_as_preoperator::{ Fail @boundary_217_as_operator::Fail.call({ PromiseStatus: 'resolved', PromiseValue: Value }, Value) }
            };
            Check();
            @boundary_227_as_preoperator::Promises
        }
    });
    @boundary_234_as_preoperator::_.async.Promise
});