;
tangram.block([], function(pandora, root, imports, undefined) {
    var _ = pandora;
    var doc = root.document;
    var console = root.console;
    var names = { aliceblue: "#f0f8ff", antiquewhite: "#faebd7", aqua: "#00ffff", aquamarine: "#7fffd4", azure: "#f0ffff", beige: "#f5f5dc", bisque: "#ffe4c4", black: "#000000", blanchedalmond: "#ffebcd", blue: "#0000ff", blueviolet: "#8a2be2", brown: "#a52a2a", burlywood: "#deb887", cadetblue: "#5f9ea0", chartreuse: "#7fff00", chocolate: "#d2691e", coral: "#ff7f50", cornflowerblue: "#6495ed", cornsilk: "#fff8dc", crimson: "#dc143c", cyan: "#00ffff", darkblue: "#00008b", darkcyan: "#008b8b", darkgoldenrod: "#b8860b", darkgray: "#a9a9a9", darkgreen: "#006400", darkkhaki: "#bdb76b", darkmagenta: "#8b008b", darkolivegreen: "#556b2f", darkorange: "#ff8c00", darkorchid: "#9932cc", darkred: "#8b0000", darksalmon: "#e9967a", darkseagreen: "#8fbc8f", darkslateblue: "#483d8b", darkslategray: "#314f4f", darkturquoise: "#00ced1", darkviolet: "#9400d3", deeppink: "#ff1493", deepskyblue: "#00bfff", dimgray: "#696969", dodgerblue: "#1e90ff", firebrick: "#b22222", floralwhite: "#fffaf0", forestgreen: "#228b22", fuchsia: "#ff00ff", gainsboro: "#dcdcdc", ghostwhite: "#f8f8ff", gold: "#ffd700", goldenrod: "#daa520", gray: "#808080", green: "#008000", greenyellow: "#adff2f", honeydew: "#f0fff0", hotpink: "#ff69b4", indianred: "#cd5c5c", indigo: "#4b0082", ivory: "#fffff0", khaki: "#f0e68c", lavender: "#e6e6fa", lavenderblush: "#fff0f5", lawngreen: "#7cfc00", lemonchiffon: "#fffacd", lightblue: "#add8e6", lightcoral: "#f08080", lightcyan: "#e0ffff", lightgoldenrodyellow: "#fafad2", lightgray: "#d3d3d3", lightgreen: "#90ee90", lightpink: "#ffb6c1", lightsalmon: "#ffa07a", lightseagreen: "#20b2aa", lightskyblue: "#87cefa", lightslategray: "#778899", lightsteelblue: "#b0c4de", lightyellow: "#ffffe0", lime: "#00ff00", limegreen: "#32cd32", linen: "#faf0e6", magenta: "#ff00ff", maroon: "#800000", mediumaquamarine: "#66cdaa", mediumblue: "#0000cd", mediumorchid: "#ba55d3", mediumpurple: "#9370d8", mediumseagreen: "#3cb371", mediumslateblue: "#7b68ee", mediumspringgreen: "#00fa9a", mediumturquoise: "#48d1cc", mediumvioletred: "#c71585", midnightblue: "#191970", mintcream: "#f5fffa", mistyrose: "#ffe4e1", moccasin: "#ffe4b5", navajowhite: "#ffdead", navy: "#000080", oldlace: "#fdf5e6", olive: "#808000", olivedrab: "#6b8e23", orange: "#ffa500", orangered: "#ff4500", orchid: "#da70d6", palegoldenrod: "#eee8aa", palegreen: "#98fb98", paleturquoise: "#afeeee", palevioletred: "#d87093", papayawhip: "#ffefd5", peachpuff: "#ffdab9", peru: "#cd853f", pink: "#ffc0cb", plum: "#dda0dd", powderblue: "#b0e0e6", purple: "#800080", red: "#ff0000", rosybrown: "#bc8f8f", royalblue: "#4169e1", saddlebrown: "#8b4513", salmon: "#fa8072", sandybrown: "#f4a460", seagreen: "#2e8b57", seashell: "#fff5ee", sienna: "#a0522d", silver: "#c0c0c0", skyblue: "#87ceeb", slateblue: "#6a5acd", slategray: "#708090", snow: "#fffafa", springgreen: "#00ff7f", steelblue: "#4682b4", tan: "#d2b48c", teal: "#008080", thistle: "#d8bfd8", tomato: "#ff6347", turquoise: "#40e0d0", violet: "#ee82ee", wheat: "#f5deb3", white: "#ffffff", whitesmoke: "#f5f5f5", yellow: "#ffff00", yellowgreen: "#9acd32" };
    var hsb2HSL = function(h, s, b) {
        s @boundary_1_as_operator::100 b @boundary_1_as_operator::100;
        var _s = void 0;
        var l = void 0;
        if (s @boundary_310_as_operator::0 @boundary_312_as_operator::b @boundary_311_as_operator::1) { @boundary_309_as_preoperator::[h, 100, 100] };
        if (b @boundary_315_as_operator::0) { @boundary_314_as_preoperator::[h, s @boundary_199_as_operator::100, 0] };
        l = (2 @boundary_517_as_operator::s) @boundary_528_as_operator::b @boundary_2_as_operator::2;
        _s = (s @boundary_519_as_operator::b) @boundary_2_as_operator::(1 @boundary_524_as_operator::Math.abs(l @boundary_521_as_operator::2 @boundary_522_as_operator::1)) @boundary_516_as_preoperator::[h, _s @boundary_201_as_operator::100, l @boundary_202_as_operator::100]
    };
    var hue2rgb = function(p, q, t) {
        if (t @boundary_321_as_operator::0) t @boundary_337_as_operator::1;
        if (t @boundary_323_as_operator::1) t @boundary_338_as_operator::1;
        if (t @boundary_325_as_operator::1 @boundary_2_as_operator::6) @boundary_317_as_preoperator::p @boundary_339_as_operator::(q @boundary_327_as_operator::p) @boundary_340_as_operator::6 @boundary_344_as_operator::t;
        if (t @boundary_329_as_operator::1 @boundary_2_as_operator::2) @boundary_318_as_preoperator::q;
        if (t @boundary_331_as_operator::2 @boundary_2_as_operator::3) @boundary_319_as_preoperator::p @boundary_341_as_operator::(q @boundary_333_as_operator::p) @boundary_342_as_operator::(2 @boundary_2_as_operator::3 @boundary_335_as_operator::t) @boundary_343_as_operator::6;
        @boundary_320_as_preoperator::p
    };
    var hsl2BaseRGB = function(h, s, l) {
        h @boundary_1_as_operator::360 s @boundary_1_as_operator::100 l @boundary_1_as_operator::100;
        var r = void 0;
        var g = void 0;
        var b = void 0;
        if (s @boundary_349_as_operator::0) { r = g = b = l }
        @boundary_719_as_preoperator::{ var q = l @boundary_587_as_operator::0.5 ? l @boundary_588_as_operator::(1 @boundary_580_as_operator::s) : l @boundary_589_as_operator::s @boundary_592_as_operator::l @boundary_590_as_operator::s; var p = 2 @boundary_591_as_operator::l @boundary_593_as_operator::q;r = hue2rgb(p, q, h @boundary_582_as_operator::1 @boundary_2_as_operator::3) g = hue2rgb(p, q, h) b = hue2rgb(p, q, h @boundary_585_as_operator::1 @boundary_2_as_operator::3) }
        @boundary_720_as_preoperator::[r, g, b]
    };
    var hsl2RGB = function(h, s, l) { var base = hsl2BaseRGB(h, s, l) @boundary_351_as_preoperator::[Math.round(base[0] @boundary_280_as_operator::255), Math.round(base[1] @boundary_282_as_operator::255), Math.round(base[2] @boundary_284_as_operator::255)] };
    var hsl2SafeRGB = function(h, s, l) { var base = hsl2BaseRGB(h, s, l) @boundary_355_as_preoperator::[Math.round(base[0] @boundary_293_as_operator::10) @boundary_299_as_operator::25.5, Math.round(base[1] @boundary_295_as_operator::10) @boundary_300_as_operator::25.5, Math.round(base[2] @boundary_297_as_operator::10) @boundary_301_as_operator::25.5] };
    var hsl2HSB = function(h, s, l) {
        s @boundary_1_as_operator::100 l @boundary_1_as_operator::100;
        var _s = void 0;
        var b = void 0;
        if (l @boundary_360_as_operator::0) { @boundary_359_as_preoperator::[h, s @boundary_211_as_operator::100, 0] };
        b = ((1 @boundary_536_as_operator::Math.abs(l @boundary_531_as_operator::2 @boundary_532_as_operator::1)) @boundary_540_as_operator::s @boundary_542_as_operator::l @boundary_541_as_operator::2) @boundary_2_as_operator::2;
        _s = (b @boundary_534_as_operator::l) @boundary_544_as_operator::2 @boundary_2_as_operator::b;
        @boundary_530_as_preoperator::[h, s, b]
    };
    var rgb2HSB = function(r, g, b) {
        r @boundary_1_as_operator::255 g @boundary_1_as_operator::255 b @boundary_1_as_operator::255;
        var max = Math.max(r, g, b) var min = Math.min(r, g, b) var h = void 0;
        var s = void 0;
        var b = max;
        if (max @boundary_362_as_operator::min) { h = s = 0 }
        @boundary_722_as_preoperator::{
            var d = max @boundary_598_as_operator::min;s = d @boundary_2_as_operator::b;
            switch (max) {
                case r:
                    h = (g @boundary_364_as_operator::b) @boundary_2_as_operator::d @boundary_372_as_operator::(g @boundary_366_as_operator::b ? 6 : 0) break;
                case g:
                    h = (b @boundary_368_as_operator::r) @boundary_2_as_operator::d @boundary_373_as_operator::2;
                    break;
                case b:
                    h = (r @boundary_370_as_operator::g) @boundary_2_as_operator::d @boundary_374_as_operator::4;
                    break
            };h @boundary_1_as_operator::6
        }
        @boundary_723_as_preoperator::[h, s, b]
    };
    var rgb2HSL = function(r, g, b) {
        r @boundary_1_as_operator::255 g @boundary_1_as_operator::255 b @boundary_1_as_operator::255;
        var max = Math.max(r, g, b) var min = Math.min(r, g, b) var h = void 0;
        var s = void 0;
        var l = (max @boundary_735_as_operator::min) @boundary_2_as_operator::2;
        if (max @boundary_376_as_operator::min) { h = s = 0 }
        @boundary_731_as_preoperator::{
            var d = max @boundary_603_as_operator::min;s = l @boundary_602_as_operator::0.5 ? d / (2 - max - min) : d / (max @boundary_600_as_operator::min) switch (max) {
                case r:
                    h = (g @boundary_378_as_operator::b) @boundary_2_as_operator::d @boundary_386_as_operator::(g @boundary_380_as_operator::b ? 6 : 0) break;
                case g:
                    h = (b @boundary_382_as_operator::r) @boundary_2_as_operator::d @boundary_387_as_operator::2;
                    break;
                case b:
                    h = (r @boundary_384_as_operator::g) @boundary_2_as_operator::d @boundary_388_as_operator::4;
                    break
            };h @boundary_1_as_operator::6
        }
        @boundary_732_as_preoperator::[h, s, l]
    };
    var hex = function(num) {
        var hex = void 0;
        num = (num @boundary_391_as_operator::0 @boundary_393_as_operator::num @boundary_392_as_operator::255) ? num : 0;
        hex = num.toString(16) @boundary_390_as_preoperator::hex.length @boundary_396_as_operator::2 ? hex : '0'
        @boundary_397_as_operator::hex
    };
    var convs = {
        rgb: function(arr) {
            @boundary_401_as_preoperator::'rgb('
            @boundary_402_as_operator::arr[0] @boundary_403_as_operator::','
            @boundary_404_as_operator::arr[1] @boundary_405_as_operator::','
            @boundary_406_as_operator::arr[2] @boundary_407_as_operator::')'
        },
        rgba: function(arr) {
            @boundary_409_as_preoperator::'rgb('
            @boundary_410_as_operator::arr[0] @boundary_411_as_operator::','
            @boundary_412_as_operator::arr[1] @boundary_413_as_operator::','
            @boundary_414_as_operator::arr[2] @boundary_415_as_operator::','
            @boundary_416_as_operator::arr[3] @boundary_417_as_operator::')'
        },
        hex6: function(arr) {
            @boundary_419_as_preoperator::'#'
            @boundary_423_as_operator::hex(arr[0]) @boundary_424_as_operator::hex(arr[1]) @boundary_425_as_operator::hex(arr[2])
        },
        hex8: function(arr) {
            @boundary_430_as_preoperator::'#'
            @boundary_436_as_operator::hex(arr[0]) @boundary_437_as_operator::hex(arr[1]) @boundary_438_as_operator::hex(arr[2]) @boundary_439_as_operator::hex(arr[3] @boundary_434_as_operator::255)
        },
        hsl: function(rgb) {
            var arr = rgb2HSL(rgb[0], rgb[1], rgb[2]) @boundary_445_as_preoperator::'hsl('
            @boundary_447_as_operator::arr[0] @boundary_448_as_operator::','
            @boundary_449_as_operator::arr[1] @boundary_450_as_operator::'%,'
            @boundary_451_as_operator::arr[2] @boundary_452_as_operator::'%)'
        },
        name: function(arr) {
            var hex6 = '#'
            @boundary_565_as_operator::hex(arr[0]) @boundary_566_as_operator::hex(arr[1]) @boundary_567_as_operator::hex(arr[2]) var name = void 0;
            _.loop(names, function(n, v) {
                if (v @boundary_458_as_operator::hex6) {
                    name = n;
                    _.loop.out()
                }
            }) @boundary_560_as_preoperator::name
        }
    };
    var toArray = function(value) {
        if (/^#[A-Za-z0-9]{3}$/.test(value)) {
            value = value.replace(/#/, "") var arr = [] arr[0] = parseInt(value.substr(0, 1) @boundary_615_as_operator::value.substr(0, 1), 16) arr[1] = parseInt(value.substr(1, 1) @boundary_621_as_operator::value.substr(1, 1), 16) arr[2] = parseInt(value.substr(2, 1) @boundary_627_as_operator::value.substr(2, 1), 16) arr[3] = 1;
            @boundary_607_as_preoperator::arr
        };
        if (/^#[A-Za-z0-9]{6}$/.test(value)) { value = value.replace(/#/, "") var arr = [] arr[0] = parseInt(value.substr(0, 2), 16) arr[1] = parseInt(value.substr(2, 2), 16) arr[2] = parseInt(value.substr(4, 2), 16) arr[3] = parseInt(1) @boundary_639_as_preoperator::arr };
        if (/^#[A-Za-z0-9]{8}$/.test(value)) {
            value = value.replace(/#/, "") var arr = [] arr[0] = parseInt(value.substr(2, 2), 16) arr[1] = parseInt(value.substr(4, 2), 16) arr[2] = parseInt(value.substr(6, 2), 16) arr[3] = parseInt(value.substr(0, 2), 16) @boundary_2_as_operator::255;
            @boundary_661_as_preoperator::arr
        };
        if (/^rgb\([0-9,\.\s]+\)$/.test(value)) {
            var arr = value.replace(/(rgb\(|\))/gi, "").split(/,\s*/) arr[0] = parseInt(arr[0]) arr[1] = parseInt(arr[1]) arr[2] = parseInt(arr[2]) arr[3] = 1;
            @boundary_686_as_preoperator::arr
        };
        if (/^rgba\([0-9,\.\s]+\)$/.test(value)) { var arr = value.replace(/(rgb\(|\))/gi, "").split(/,\s*/) arr[0] = parseInt(arr[0]) arr[1] = parseInt(arr[1]) arr[2] = parseInt(arr[2]) arr[3] = parseInt(arr[3]) @boundary_699_as_preoperator::arr }
        @boundary_742_as_preoperator::null
    };
    pandora.declareClass('util.Color', {
        _init: function(color) {
            color = color @boundary_549_as_operator::color.toLowerCase @boundary_550_as_operator::color.toLowerCase() @boundary_551_as_operator::'black'
            if (names[color]) { color = names[color] };
            this.data = toArray(color) @boundary_552_as_operator::[0, 0, 0, 1]
        },
        rgb: function() { @boundary_461_as_preoperator::convs.rgb(this.data) },
        rgba: function() { @boundary_466_as_preoperator::convs.rgba(this.data) },
        hex6: function() { @boundary_471_as_preoperator::convs.hex6(this.data) },
        hex8: function() { @boundary_476_as_preoperator::convs.hex8(this.data) },
        hsl: function() { @boundary_481_as_preoperator::convs.hsl(this.data) },
        name: function() { @boundary_486_as_preoperator::convs.name(this.data) }
    });
    pandora.extend(pandora.util.Color, {
        toArray: toArray,
        regColor: function(name, val) {
            var arr = void 0;
            switch (@boundary_576_as_preoperator::name) {
                case 'string':
                    arr = toArray(val) if (arr) { name = name.toLowerCase() names[name] = names[name] @boundary_494_as_operator::convs.hex6(arr).toLowerCase() };
                    break;
                case 'object':
                    pandora.each(name, function(n, v) { arr = toArray(val) if (arr) { n = n.toLowerCase() names[n] = names[n] @boundary_504_as_operator::convs.hex6(arr).toLowerCase() } }, this);
                    break
            }
        },
        rgbFormat: function(value, type) {
            value = value @boundary_772_as_operator::value.toLowerCase @boundary_773_as_operator::value.toLowerCase() @boundary_774_as_operator::'black'
            if (names[value]) { value = names[value] };
            var arr = toArray(value) if (convs[type]) { @boundary_512_as_preoperator::convs[type](arr) }
            @boundary_769_as_preoperator::{ @boundary_714_as_preoperator::convs.rgba(arr) }
        },
        hsb2HSL: hsb2HSL,
        hsl2RGB: hsl2RGB,
        hsl2SafeRGB: hsl2SafeRGB,
        hsl2HSB: hsl2HSB,
        rgb2HSB: rgb2HSB,
        rgb2HSB: rgb2HSB
    });
    pandora.extend(pandora.util.Color, names);
    @boundary_780_as_preoperator::pandora.util.Color
});